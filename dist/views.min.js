import{getRandomKey}from"./utils.min.js";export class Views{constructor(e){this.dti=e,this.views={}}obtainTieViews(e){let t=this.views[e];return t||(t={_pathsCache:[]},this.views[e]=t),t}deleteTieViews(e){delete this.views[e]}addView(e,t){let s,i,o,r,n=t.length,a=!1;const h=void 0!==e[this.dti.scopeRootKey];for(;n;)if((s=t[--n]).isFunctional)for(r=(i=s.fParams).length;r;)o=i[--r],this.seekAndInsertView(o,e),h||"scope"!==o.targetProperty||(a=!0);else this.seekAndInsertView(s,e),h||"scope"!==s.targetProperty||(a=!0);e[this.dti.paramsKey]=t,a&&(e[this.dti.scopeRootKey]=getRandomKey(16))}delView(e,t){let s,i,o,r,n=t.length;for(;n;)if((s=t[--n]).isFunctional)for(r=(i=s.fParams).length;r;)o=i[--r],this.seekAndRemoveView(o,e);else this.seekAndRemoveView(s,e);delete e[this.dti.paramsKey]}seekAndInsertView(e,t){const s=e.tieKey,i=e.rawPath,o=this.obtainTieViews(s);let r=o[i];r||(r=[],o[i]=r,o._pathsCache.push(i)),r.indexOf(t)<0&&r.push(t)}seekAndRemoveView(e,t){const s=e.tieKey,i=e.rawPath,o=this.views[s];if(o){const e=o[i];if(e){const s=e.indexOf(t);s>=0&&e.splice(s,1)}}}setViewProperty(e,t,s){const i=t.targetProperty;try{this._unsafeSetProperty(e,t,s,i)}catch(t){console.error(`failed to set '${i}' of '${e}' to '${s}'`,t)}}_unsafeSetProperty(e,t,s,i){if("href"===i&&"object"==typeof e.href)e.href.baseVal=s;else if("scope"===i)this.dti.ties.update(e,s);else if("classList"===i){const i=t.iClasses.slice(0);s&&(Array.isArray(s)&&s.length?s.forEach(e=>{i.indexOf(e)<0&&i.push(e)}):"object"==typeof s?Object.keys(s).forEach(e=>{const t=i.indexOf(e);s[e]?t<0&&i.push(e):t>=0&&i.splice(t,1)}):"string"==typeof s&&i.indexOf(s)<0&&i.push(s)),e.className=i.join(" ")}else e[i]=s}};