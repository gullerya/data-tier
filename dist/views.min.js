export class Views{constructor(e){this.dti=e,this.views={}}obtainTieViews(e){let s=this.views[e];return s||(s={_pathsCache:[]},this.views[e]=s),s}deleteTieViews(e){delete this.views[e]}addView(e,s){let t,i,o,r,n=s.length;for(;n;)if((t=s[--n]).isFunctional)for(r=(i=t.fParams).length;r;)o=i[--r],this.seekAndInsertView(o,e);else this.seekAndInsertView(t,e);e[this.dti.paramsKey]=s}delView(e,s){let t,i,o,r,n=s.length;for(;n;)if((t=s[--n]).isFunctional)for(r=(i=t.fParams).length;r;)o=i[--r],this.seekAndRemoveView(o,e);else this.seekAndRemoveView(t,e);delete e[this.dti.paramsKey]}seekAndInsertView(e,s){const t=e.tieKey,i=e.rawPath,o=this.obtainTieViews(t);let r=o[i];r||(r=[],o[i]=r,o._pathsCache.push(i)),r.indexOf(s)<0&&r.push(s)}seekAndRemoveView(e,s){const t=e.tieKey,i=e.rawPath,o=this.views[t];if(o){const e=o[i];if(e){const t=e.indexOf(s);t>=0&&e.splice(t,1)}}}setViewProperty(e,s,t){const i=s.targetProperty;try{this._unsafeSetProperty(e,s,t,i)}catch(s){console.error(`failed to set '${i}' of '${e}' to '${t}'`,s)}}_unsafeSetProperty(e,s,t,i){if("href"===i&&"object"==typeof e.href)e.href.baseVal=t;else if("scope"===i&&e[this.dti.scopeRootKey])this.dti.ties.update(e,t);else if("classList"===i){const i=s.iClasses.slice(0);t&&(Array.isArray(t)&&t.length?t.forEach(e=>{i.indexOf(e)<0&&i.push(e)}):"object"==typeof t?Object.keys(t).forEach(e=>{const s=i.indexOf(e);t[e]?s<0&&i.push(e):s>=0&&i.splice(s,1)}):"string"==typeof t&&i.indexOf(t)<0&&i.push(t)),e.className=i.join(" ")}else e[i]=t}};