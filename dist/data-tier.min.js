import{Ties}from"./ties.min.js";import{Views}from"./views.min.js";import{DEFAULT_TIE_TARGET_PROVIDER as dttp,CHANGE_EVENT_NAME_PROVIDER as cenp,getTargetProperty,extractViewParams,addChangeListener,delChangeListener,getPath,setPath,callViewFunction}from"./utils.min.js";console.info("DT: starting initialization...");const initStartTime=performance.now(),MUTATION_OBSERVER_OPTIONS={childList:!0,subtree:!0,attributes:!0,attributeOldValue:!0,attributeFilter:["data-tie"],characterData:!1,characterDataOldValue:!1},roots=new WeakSet;class Instance{constructor(){this.params=Object.freeze(Array.from(new URL(import.meta.url).searchParams).reduce((e,t)=>(e[t[0]]=t[1],e),{})),this.paramsKey=Symbol("view.params"),this.scopeRootKey=Symbol("scope.root"),this.ties=new Ties(this),this.views=new Views(this)}addRootDocument(e){if(!e||Node.DOCUMENT_NODE!==e.nodeType&&Node.DOCUMENT_FRAGMENT_NODE!==e.nodeType)throw new Error("invalid argument, NULL or not one of: DOCUMENT_NODE, DOCUMENT_FRAGMENT_NODE");return roots.has(e)?(console.warn("any root document may be added only once"),!1):(new MutationObserver(processDomChanges).observe(e,MUTATION_OBSERVER_OPTIONS),addTree(e),roots.add(e),!0)}removeRootDocument(e){return roots.has(e)?(dropTree(e),roots.delete(e),!0):(console.warn("no root document "+e+" known"),!1)}}const instance=new Instance;export const ties=instance.ties;export const DEFAULT_TIE_TARGET_PROVIDER=dttp;export const CHANGE_EVENT_NAME_PROVIDER=cenp;export const addRootDocument=instance.addRootDocument;export const removeRootDocument=instance.removeRootDocument;function changeListener(e){const t=e.currentTarget,n=getTargetProperty(t),o=t[instance.paramsKey];let a,s,i,r=o.length;for(;r--;)(a=o[r]).targetProperty===n&&(s=instance.ties.get(a.tieKey))&&(i=t[n],setPath(s,a.path,i))}function add(e){if(e.matches(":defined")){const t=extractViewParams(e,instance.scopeRootKey);t&&(instance.views.addView(e,t),updateFromView(e,t),addChangeListener(e,changeListener)),e.shadowRoot&&!e.hasAttribute("data-tie-blackbox")&&instance.addRootDocument(e.shadowRoot)}else waitUndefined(e)}function waitUndefined(e){let t;if(e.localName.indexOf("-")>0)t=e.localName;else{const n=/.*is\s*=\s*"([^"]+)"\s*.*/.exec(e.outerHTML);n&&n.length>1&&(t=n[1])}t?customElements.whenDefined(t).then(()=>add(e)):console.warn("failed to determine tag of yet undefined custom element "+e+", abandoning")}function updateFromView(e,t){let n=t.length;for(;n--;){const o=t[n];if(o.isFunctional){let t=!1;const n=[];o.fParams.forEach(e=>{let o;const a=instance.ties.get(e.tieKey);a&&(o=getPath(a,e.path),t=!0),n.push(o)}),t&&(n.push(null),callViewFunction(e,o.targetProperty,n))}else{const t=instance.ties.get(o.tieKey);if(!t)continue;let n=getPath(t,o.path);void 0===n&&(n=""),instance.views.setViewProperty(e,o,n)}}}function addTree(e){let t,n=[e];e.childElementCount&&(n=Array.from(e.querySelectorAll("*"))).unshift(e);const o=n.length;for(let e=0;e<o;e++)try{t=n[e],Node.ELEMENT_NODE!==t.nodeType||t[instance.paramsKey]||add(t)}catch(e){console.error("failed to process/add element",e)}}function dropTree(e){let t,n,o,a=[e];for(e.childElementCount&&(a=Array.from(e.querySelectorAll("*"))).unshift(e),t=a.length;t--;)(o=(n=a[t])[instance.paramsKey])&&(instance.views.delView(n,o),delChangeListener(n,changeListener)),n.shadowRoot&&!n.hasAttribute("data-tie-blackbox")&&instance.removeRootDocument(n.shadowRoot)}function onTieParamChange(e,t,n){let o;t&&(o=e[instance.paramsKey])&&(instance.views.delView(e,o),delChangeListener(e,changeListener)),n&&(o=extractViewParams(e,instance.scopeRootKey))&&(instance.views.addView(e,o),updateFromView(e,o),addChangeListener(e,changeListener))}function processDomChanges(e){const t=e.length;let n,o,a,s,i,r,c,d,l=0;for(;l<t;l++)if("attributes"===(s=(a=e[l]).type)){const e=a.attributeName,t=a.target,n=a.oldValue,o=t.getAttribute(e);n!==o&&onTieParamChange(t,n,o)}else if("childList"===s){for(r=(i=a.addedNodes).length;r--;)o=(n=i[r]).nodeType,Node.ELEMENT_NODE===o&&addTree(n);for(d=(c=a.removedNodes).length;d--;)o=(n=c[d]).nodeType,Node.ELEMENT_NODE===o&&dropTree(n)}}"false"!==instance.params.autostart&&!1!==instance.params.autostart&&instance.addRootDocument(document),console.info("DT: ... initialization DONE (took "+Math.floor(100*(performance.now()-initStartTime))/100+"ms)");